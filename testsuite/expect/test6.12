#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test scancel signal to batch script (--batch option)
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "$test_dir/input"
set file_out    "$test_dir/output"
set file_err    "$test_dir/error"
set job_id      0
set step_id     0

proc cleanup {} {
	global job_id

	cancel_job $job_id
}

#
# Build input script file
#
make_bash_script $file_in "
$srun $bin_sleep 500 &

trap true SIGINT

while true; do
	wait
	if \[ \$? -ge 128 \]; then
		echo \"INTerrupted wait, resuming\"
	else
		break
	fi
done
"

#
# Spawn a sbatch job
#
set timeout $max_job_delay
set job_id [submit_job -fail "--output=$file_out --error=$file_err -t2 $file_in"]

#
# Wait for job to start running, then signal it
#
wait_for_job -fail $job_id "RUNNING"
exec $bin_sleep 5
spawn $squeue --steps=$job_id.$step_id
expect {
	eof {
		wait
	}
}

#
# The intent of the following scancel is to send a SIGINT signal
# to the batch script, and because srun ignores lone SIGINTs, the
# job step should not be killed.  Our batch script, above, is crafted
# to ignore all SIGINT and resume waiting for the child process
# (the srun) to exit.  If it did not trap SIGINT, the "wait" would
# be killed by the SIGINT, then the batch script would exit triggering
# a kill of the entire job.
#
spawn $scancel --batch -s INT $job_id
expect {
	eof {
		wait
	}
}
exec $bin_sleep 5

#
# Confirm that job step still exists.
# If signal goes to child processes (default without --batch) then
# sleep will exit along with the entire job.
#
set found_step 0
spawn $squeue --steps=$job_id.$step_id
expect {
	-re "($job_id)\\.$step_id" {
		set found_step 1
		exp_continue
	}
	eof {
		wait
	}
}
subtest {$found_step != 0} "Confirm that job step still exists" "Job step not found, apparently killed"
cancel_job $job_id

#
# Build and run second test script
#
file delete $file_out $file_err
make_bash_script $file_in "$bin_sleep 500"

set job_id [submit_job -fail "--output=$file_out --error=$file_err -t2 $file_in"]

#
# Wait for job to start running and
# send SIGHUP and confirm that job gets cancelled
#
wait_for_job -fail $job_id "RUNNING"
exec $bin_sleep 5
spawn $squeue --jobs=$job_id
expect {
	eof {
		wait
	}
}
spawn $scancel --batch -s HUP $job_id
expect {
	eof {
		wait
	}
}
exec $bin_sleep 5
set found_job 0
set purged_job 0
spawn $squeue --jobs=$job_id --states=cg,cd,f
expect {
	-re "Invalid job id specified" {
		set purged_job 1
		exp_continue
	}
	-re "($job_id)" {
		set found_job 1
		exp_continue
	}
	eof {
		wait
	}
}
if {$found_job == 0} {
	if {$purged_job == 1} {
		regexp "($number)" [get_config_param "MinJobAge"] {} min_job_age
	}
	if {$purged_job == 1 && $min_job_age < 60} {
		log_warn "MinJobAge ($min_job_age) configured too low to capture job state after completion"
	} else {
		spawn $scontrol show job $job_id
		expect {
			eof {
				wait
			}
		}
		fail "Job not killed on SIGHUP"
	}
}

#
# Submit another job to be signaled with steps
#
file delete $file_out $file_err
make_bash_script $file_in "$srun $bin_sleep 500"

set job_id [submit_job -fail "--output=$file_out --error=$file_err -t2 $file_in"]

#
# Wait for job to start running
#
wait_for_job -fail $job_id "RUNNING"
exec $bin_sleep 5
spawn $squeue --steps=$job_id.$step_id
expect {
	eof {
		wait
	}
}
spawn $scancel -s INT $job_id
expect {
	eof {
		wait
	}
}
exec $bin_sleep 5

#
# Confirm that job is gone
#
set found_step 0
spawn $squeue --steps=$job_id.$step_id
expect {
	-re "($job_id)\\.$step_id" {
		set found_step 1
		exp_continue
	}
	eof {
		wait
	}
}
subtest {$found_step != 1} "Confirm that job is gone" "Job step found, not killed"
