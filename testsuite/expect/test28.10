#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test change to maximum running task count in a job array.
############################################################################
# Copyright (C) 2011-2015 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set array_size    4
set file_script   "$test_dir/script"
set job_id        0
set task_limit    1

if {[get_config_param "MaxArraySize"] < [expr $array_size + 1]} {
	skip "MaxArraySize is too small"
}

proc cleanup {} {
	global job_id

	cancel_job $job_id
}

# Submit a job array with 4 elements
make_bash_script $file_script "sleep 20"

spawn $sbatch -n1 --array=0-[expr $array_size -1]%$task_limit --output=/dev/null -t1 $file_script
expect {
	-re "Submitted batch job ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "error" {
		fail "sbatch did not submit jobs"
	}
	timeout {
		fail "sbatch not responding"
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	fail "sbatch did not submit jobs"
}

wait_for_job -fail ${job_id}_0 "RUNNING"

set inx 0
while { $inx < 10 } {
	$bin_sleep 6
	set run_count 0
	spawn $scontrol show job $job_id
	expect {
		-re "RUNNING" {
			incr run_count
			exp_continue
		}
		timeout {
			fail "scontrol not responding"
		}
		eof {
			wait
		}
	}
	if {$run_count > $task_limit} {
		fail "Too many tasks in the job array are running ($run_count > $task_limit)"
	}
	log_debug "+++ $run_count running tasks +++"
	if {$run_count == 0} {
		break
	}
	if {$run_count == $task_limit} {
		incr task_limit
		spawn $scontrol update jobid=$job_id arraytaskthrottle $task_limit
		expect {
			timeout {
				fail "scontrol not responding"
			}
			eof {
				wait
			}
		}
	}
	incr inx
}
