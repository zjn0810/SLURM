#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Validate sbcast for a hetjob allocation.
############################################################################
# Copyright (C) 2015-2107 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
# and Isaac Hartung <ihartung@schedmd.com>
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set script    "$test_dir/job_script"
set stdout    "$test_dir/output"
set stderr    "$test_dir/error"
set job_id     0
set hostlist   ""
set node1      ""
set node2      ""
set het_job_id 0
set tmp_dir    "/tmp/${test_name}_[pid]"

set accounting_storage_enforce [get_config_param "AccountingStorageEnforce"]
if {[param_contains $accounting_storage_enforce "nosteps"] || [param_contains $accounting_storage_enforce "nojobs"]} {
	skip "This test can not be run with nosteps or nojobs (AccountingStorageEnforce)"
}
if {[get_config_param "FrontendName"] ne "MISSING"} {
	skip "This test is incompatible with front-end systems"
} elseif {[get_config_param "SlurmdUser"] ne "root(0)"} {
	skip "This test requires that the SlurmdUser be root"
} elseif {[get_partition_param [default_partition] "TotalNodes"] < 2} {
	skip "This test requires that the configuration has at least 2 nodes"
}
if {[get_config_param "SchedulerType"] ne "sched/backfill"} {
	skip "This test requires SchedulerType = sched/backfill"
}

set def_part [default_partition]
set nodes [get_nodes_by_request "-N2 -p $def_part"]

if { [llength $nodes] != 2 } {
	skip "Did not find at least 2 idle nodes"
}

set node1 [lindex $nodes 0]
set node2 [lindex $nodes 1]
if {$node1 eq "" || $node2 eq ""} {
	skip "Did not find at least 2 idle nodes"
}

proc cleanup { } {
	global het_job_id

	cancel_job $het_job_id
}

set matches 0
set index 0
set timeout $max_job_delay
spawn $salloc -t2 -N1 : -N1 $bin_bash
expect {
	-re "job ($number) has been allocated resources" {
		set het_job_id $expect_out(1,string)
		reset_bash_prompt
		exp_continue
	}
	-re "$test_prompt" {
		#log_debug "Job initiated"
	}
	timeout {
		fail "salloc: allocation not granted in $timeout seconds"
	}
	eof {
		wait
	}
}
if {$het_job_id == 0} {
	fail "salloc failure"
}

make_bash_script $script "
$srun -N1 -n1 --het-group=0 mkdir -p $tmp_dir/$node1
$srun -N1 -n1 --het-group=1 mkdir -p $tmp_dir/$node2

$sbcast -f -j$het_job_id $srun $tmp_dir/file
$sbcast -f -j${het_job_id}+0 $srun $tmp_dir/$node1/file_comp0
$sbcast -f -j${het_job_id}+1 $srun $tmp_dir/$node2/file_comp1

echo -n \"\nChecking node 1: \"
$srun -Q -N1 -n1 --het-group=1 ls $tmp_dir/file

echo -n \"\nChecking node 0: \"
$srun -Q -N1 -n1 --het-group=0 ls $tmp_dir/file

echo -n \"\nChecking node 1 again: \"
$srun -Q -N1 -n1 --het-group=1 ls $tmp_dir/$node2/file_comp1

echo -n \"\nChecking node 0 again: \"
$srun -Q -N1 -n1 --het-group=0 ls $tmp_dir/$node1/file_comp0

echo -n \"\nChecking node 1 for lack: \"
$srun -Q -N1 -n1 --het-group=1 ls $tmp_dir/$node2/file_comp0

echo -n \"\nChecking node 0 for lack: \"
$srun -Q -N1 -n1 --het-group=0 ls $tmp_dir/$node1/file_comp1

$srun --het-group=1 $bin_rm -rf $tmp_dir
$srun --het-group=0 $bin_rm -rf $tmp_dir
"

set het_job_id [submit_job -fail "-o $stdout -e $stderr -t2 -N1 -w $node1 : -w $node2 -N1 -t10 $script"]
wait_for_job -fail $het_job_id "DONE" 1
wait_for_file -timeout 2 -fail $stdout

set timeout $max_job_delay
set matches 0
spawn $bin_cat $stdout
expect {
	-re "Permission denied" {
		fail "Unable to delete/create file, check permissions"
	}
	-re "cannot create directory" {
		log_debug "This error is expected when nodes share the same tmp directory"
		exp_continue
	}
	-re "Checking node 1: *$tmp_dir/file" {
		incr matches
		exp_continue
	}
	-re "Checking node 0: *$tmp_dir/file" {
		incr matches
		exp_continue
	}
	-re "Checking node 1 again: *$tmp_dir/$node2/file_comp1" {
		incr matches
		exp_continue
	}
	-re "Checking node 0 again: *$tmp_dir/$node1/file_comp0" {
		incr matches
		exp_continue
	}
	-re "Checking node 1 for lack: *$tmp_dir/$node1/file_comp0" {
		fail "sbcast copied file to wrong node"
	}
	-re "Checking node 0 for lack: *$tmp_dir/$node2/file_comp1" {
		fail "sbcast copied file to wrong node"
	}
	-re "$test_prompt" {
		#log_debug "Job initiated"
	}
	timeout {
		fail "salloc is not responding"
	}
	eof {
		wait
	}
}
if {$matches != 4} {
	fail "sbcast did not copy the file(s) to the correct nodes ($matches != 4)"
}
